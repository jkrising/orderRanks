// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/orderRanks.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getCompatibility
bool getCompatibility(const Rcpp::IntegerVector& ranking, const Rcpp::NumericVector& left, const Rcpp::NumericVector& right);
static SEXP _orderRanks_getCompatibility_try(SEXP rankingSEXP, SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type ranking(rankingSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type left(leftSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(getCompatibility(ranking, left, right));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _orderRanks_getCompatibility(SEXP rankingSEXP, SEXP leftSEXP, SEXP rightSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_orderRanks_getCompatibility_try(rankingSEXP, leftSEXP, rightSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getRankDistance
double getRankDistance(const Rcpp::IntegerVector& r1, const Rcpp::IntegerVector& r2);
static SEXP _orderRanks_getRankDistance_try(SEXP r1SEXP, SEXP r2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type r2(r2SEXP);
    rcpp_result_gen = Rcpp::wrap(getRankDistance(r1, r2));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _orderRanks_getRankDistance(SEXP r1SEXP, SEXP r2SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_orderRanks_getRankDistance_try(r1SEXP, r2SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// getRankIntervals
Rcpp::DataFrame getRankIntervals(const Rcpp::NumericVector& left, const Rcpp::NumericVector& right);
static SEXP _orderRanks_getRankIntervals_try(SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type left(leftSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(getRankIntervals(left, right));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _orderRanks_getRankIntervals(SEXP leftSEXP, SEXP rightSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_orderRanks_getRankIntervals_try(leftSEXP, rightSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _orderRanks_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("bool(*getCompatibility)(const Rcpp::IntegerVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
        signatures.insert("double(*getRankDistance)(const Rcpp::IntegerVector&,const Rcpp::IntegerVector&)");
        signatures.insert("Rcpp::DataFrame(*getRankIntervals)(const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _orderRanks_RcppExport_registerCCallable() { 
    R_RegisterCCallable("orderRanks", "_orderRanks_getCompatibility", (DL_FUNC)_orderRanks_getCompatibility_try);
    R_RegisterCCallable("orderRanks", "_orderRanks_getRankDistance", (DL_FUNC)_orderRanks_getRankDistance_try);
    R_RegisterCCallable("orderRanks", "_orderRanks_getRankIntervals", (DL_FUNC)_orderRanks_getRankIntervals_try);
    R_RegisterCCallable("orderRanks", "_orderRanks_RcppExport_validate", (DL_FUNC)_orderRanks_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP run_testthat_tests(void *);

static const R_CallMethodDef CallEntries[] = {
    {"_orderRanks_getCompatibility", (DL_FUNC) &_orderRanks_getCompatibility, 3},
    {"_orderRanks_getRankDistance", (DL_FUNC) &_orderRanks_getRankDistance, 2},
    {"_orderRanks_getRankIntervals", (DL_FUNC) &_orderRanks_getRankIntervals, 2},
    {"_orderRanks_RcppExport_registerCCallable", (DL_FUNC) &_orderRanks_RcppExport_registerCCallable, 0},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_orderRanks(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
